#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Advanced IP Discovery Tool
Domain və subdomain-lər üçün bütün IP məlumatlarını toplayır
"""

import requests
import socket
import dns.resolver
import subprocess
import re
import json
import time
import concurrent.futures
from urllib.parse import urlparse
import warnings
import sys
import os
warnings.filterwarnings("ignore")

class AdvancedIPDiscovery:
    def __init__(self, domain, subdomain_file=None):
        self.domain = domain.replace('http://', '').replace('https://', '').split('/')[0]
        self.subdomain_file = subdomain_file
        self.all_domains = set()
        self.results = {}
        
        # Ana domain əlavə et
        self.all_domains.add(self.domain)
        
    def print_banner(self):
        print("""
╔══════════════════════════════════════════════════════════════╗
║                ADVANCED IP DISCOVERY TOOL                   ║
║            Comprehensive Domain IP Intelligence             ║
╚══════════════════════════════════════════════════════════════╝
        """)
        print(f"[+] Ana Domain: {self.domain}")
        if self.subdomain_file:
            print(f"[+] Subdomain faylı: {self.subdomain_file}")
        print("="*60)

    def load_subdomains(self):
        """Subdomain faylını oxuyur"""
        if not self.subdomain_file:
            return
            
        print("\n[1] Subdomain faylı oxunur...")
        
        if not os.path.exists(self.subdomain_file):
            print(f"   [-] Fayl tapılmadı: {self.subdomain_file}")
            return
            
        try:
            with open(self.subdomain_file, 'r', encoding='utf-8') as f:
                subdomains = f.read().splitlines()
                
            for sub in subdomains:
                sub = sub.strip()
                if sub and not sub.startswith('#'):
                    # Tam domain adı formatında (sizin format)
                    if sub.endswith('.'):
                        sub = sub[:-1]  # Son nöqtəni sil
                    
                    # Əgər tam domain deyilsə, ana domainlə birləşdir
                    if not '.' in sub:
                        full_sub = f"{sub}.{self.domain}"
                    elif not sub.endswith(self.domain) and '.' in sub:
                        # Subdomain prefix-i varsa
                        if sub.count('.') == 0:
                            full_sub = f"{sub}.{self.domain}"
                        else:
                            full_sub = sub  # Artıq tam domain
                    else:
                        full_sub = sub
                        
                    self.all_domains.add(full_sub)
                    
            print(f"   [+] {len(subdomains)} subdomain yükləndi")
            print(f"   [+] Cəmi yoxlanacaq domain: {len(self.all_domains)}")
            
        except Exception as e:
            print(f"   [-] Fayl oxuma xətası: {e}")

    def generate_common_subdomains(self):
        """Ümumi subdomain-ləri əlavə edir"""
        print("\n[2] Ümumi subdomain-lər əlavə edilir...")
        
        common_subs = [
            'www', 'mail', 'ftp', 'admin', 'test', 'dev', 'staging', 'api', 'blog',
            'shop', 'forum', 'support', 'help', 'news', 'mobile', 'app', 'secure',
            'vpn', 'remote', 'login', 'panel', 'cpanel', 'webmail', 'portal',
            'direct', 'origin', 'real', 'server', 'backend', 'internal', 'old',
            'new', 'beta', 'alpha', 'demo', 'sandbox', 'prod', 'production',
            'git', 'svn', 'cdn', 'static', 'assets', 'img', 'images', 'upload',
            'download', 'files', 'docs', 'wiki', 'kb', 'status', 'monitor',
            'analytics', 'stats', 'admin', 'control', 'manage', 'dashboard'
        ]
        
        initial_count = len(self.all_domains)
        
        for sub in common_subs:
            full_domain = f"{sub}.{self.domain}"
            self.all_domains.add(full_domain)
            
        print(f"   [+] {len(common_subs)} ümumi subdomain əlavə edildi")
        print(f"   [+] Cəmi domain: {len(self.all_domains)}")

    def resolve_domain_ip(self, domain):
        """Bir domain üçün bütün IP məlumatlarını alır"""
        domain_data = {
            'domain': domain,
            'a_records': [],
            'aaaa_records': [],
            'mx_records': [],
            'ns_records': [],
            'cname_records': [],
            'txt_records': [],
            'all_ips': set()
        }
        
        record_types = ['A', 'AAAA', 'MX', 'NS', 'CNAME', 'TXT']
        
        for record_type in record_types:
            try:
                answers = dns.resolver.resolve(domain, record_type, timeout=5)
                
                for answer in answers:
                    if record_type == 'A':
                        ip = str(answer)
                        domain_data['a_records'].append(ip)
                        domain_data['all_ips'].add(ip)
                        
                    elif record_type == 'AAAA':
                        ip = str(answer)
                        domain_data['aaaa_records'].append(ip)
                        domain_data['all_ips'].add(ip)
                        
                    elif record_type == 'MX':
                        mx_info = str(answer).split()
                        if len(mx_info) >= 2:
                            mx_domain = mx_info[1].rstrip('.')
                            domain_data['mx_records'].append(f"{mx_info[0]} {mx_domain}")
                            
                            # MX domain IP-sini tap
                            try:
                                mx_ip = socket.gethostbyname(mx_domain)
                                domain_data['all_ips'].add(mx_ip)
                            except:
                                pass
                                
                    elif record_type == 'NS':
                        ns_domain = str(answer).rstrip('.')
                        domain_data['ns_records'].append(ns_domain)
                        
                        # NS domain IP-sini tap
                        try:
                            ns_ip = socket.gethostbyname(ns_domain)
                            domain_data['all_ips'].add(ns_ip)
                        except:
                            pass
                            
                    elif record_type == 'CNAME':
                        cname_domain = str(answer).rstrip('.')
                        domain_data['cname_records'].append(cname_domain)
                        
                    elif record_type == 'TXT':
                        txt_data = str(answer).strip('"')
                        domain_data['txt_records'].append(txt_data)
                        
            except Exception:
                continue
        
        # Socket ilə də yoxla
        try:
            ip = socket.gethostbyname(domain)
            domain_data['all_ips'].add(ip)
            if ip not in domain_data['a_records']:
                domain_data['a_records'].append(ip)
        except:
            pass
            
        domain_data['all_ips'] = list(domain_data['all_ips'])
        return domain_data

    def discover_all_ips(self):
        """Bütün domain-lər üçün IP kəşfiyyatı edir"""
        print(f"\n[3] {len(self.all_domains)} domain üçün IP kəşfiyyatı başlayır...")
        
        def process_domain(domain):
            try:
                return self.resolve_domain_ip(domain)
            except Exception as e:
                return None

        # Paralel işləmə
        active_domains = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:
            future_to_domain = {executor.submit(process_domain, domain): domain for domain in self.all_domains}
            
            for future in concurrent.futures.as_completed(future_to_domain):
                domain = future_to_domain[future]
                try:
                    result = future.result()
                    if result and (result['all_ips'] or result['a_records'] or result['mx_records']):
                        active_domains.append(result)
                        print(f"   [+] {domain}: {len(result['all_ips'])} IP tapıldı")
                except Exception as e:
                    continue
        
        self.results['domains'] = active_domains
        print(f"\n   [✓] {len(active_domains)} aktiv domain tapıldı")

    def historical_dns_lookup(self):
        """Tarixi DNS məlumatlarını yoxlayır"""
        print("\n[4] Tarixi DNS məlumatları yoxlanır...")
        
        historical_ips = set()
        
        # nslookup ilə yoxla
        for domain in list(self.all_domains)[:10]:  # İlk 10 domain
            try:
                result = subprocess.run(['nslookup', domain], 
                                      capture_output=True, text=True, timeout=5)
                
                ip_pattern = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
                ips = re.findall(ip_pattern, result.stdout)
                
                for ip in ips:
                    if not ip.startswith(('127.', '0.0.0.', '255.255.')):
                        historical_ips.add(ip)
                        
            except Exception:
                continue
        
        if historical_ips:
            print(f"   [+] {len(historical_ips)} tarixi IP tapıldı")
            for ip in list(historical_ips)[:10]:
                print(f"       • {ip}")
        else:
            print("   [-] Tarixi IP tapılmadı")
            
        self.results['historical_ips'] = list(historical_ips)

    def get_whois_info(self, ip_list):
        """IP-lər üçün WHOIS məlumatları"""
        print(f"\n[5] {len(ip_list)} IP üçün WHOIS məlumatları...")
        
        whois_data = {}
        
        for ip in ip_list[:15]:  # İlk 15 IP
            try:
                result = subprocess.run(['whois', ip], 
                                      capture_output=True, text=True, timeout=8)
                
                if result.stdout:
                    org_info = {}
                    lines = result.stdout.lower().split('\n')
                    
                    for line in lines:
                        if ':' in line:
                            key, value = line.split(':', 1)
                            key = key.strip()
                            value = value.strip()
                            
                            if key in ['org', 'orgname', 'organization', 'netname', 'country']:
                                org_info[key] = value
                    
                    if org_info:
                        whois_data[ip] = org_info
                        print(f"   [+] {ip}: {org_info.get('org', org_info.get('orgname', 'N/A'))}")
                        
            except Exception:
                continue
        
        self.results['whois_info'] = whois_data

    def analyze_ip_ranges(self):
        """IP aralıqlarını analiz edir"""
        print("\n[6] IP aralıqları analiz edilir...")
        
        all_ips = set()
        
        # Bütün tapılan IP-ləri topla
        for domain_data in self.results.get('domains', []):
            all_ips.update(domain_data['all_ips'])
        
        if 'historical_ips' in self.results:
            all_ips.update(self.results['historical_ips'])
        
        # IP aralıqlarını qruplaşdır
        ip_ranges = {}
        for ip in all_ips:
            try:
                ip_parts = ip.split('.')
                if len(ip_parts) == 4:
                    range_key = f"{ip_parts[0]}.{ip_parts[1]}.{ip_parts[2]}.x"
                    if range_key not in ip_ranges:
                        ip_ranges[range_key] = []
                    ip_ranges[range_key].append(ip)
            except:
                continue
        
        print(f"   [+] {len(ip_ranges)} IP aralığı tapıldı:")
        for range_key, ips in ip_ranges.items():
            if len(ips) > 1:
                print(f"       • {range_key}: {len(ips)} IP")
        
        self.results['ip_ranges'] = ip_ranges
        self.results['all_unique_ips'] = list(all_ips)

    def generate_comprehensive_report(self):
        """Ətraflı hesabat yaradır"""
        print("\n" + "="*80)
        print("                        COMPREHENSIVE IP REPORT")
        print("="*80)
        
        # Ümumi statistika
        total_domains = len(self.results.get('domains', []))
        total_ips = len(self.results.get('all_unique_ips', []))
        
        print(f"\n📊 ÜMUMİ STATİSTİKA:")
        print(f"   • Aktiv domain-lər: {total_domains}")
        print(f"   • Unikal IP-lər: {total_ips}")
        print(f"   • Tarixi IP-lər: {len(self.results.get('historical_ips', []))}")
        print(f"   • WHOIS məlumatları: {len(self.results.get('whois_info', {}))}")
        
        # Domain-lər üzrə məlumat
        print(f"\n🌐 DOMAIN-LƏR VƏ IP-LƏR:")
        for domain_data in self.results.get('domains', []):
            domain = domain_data['domain']
            print(f"\n   [{domain}]")
            
            if domain_data['a_records']:
                print(f"     A Records: {', '.join(domain_data['a_records'])}")
            if domain_data['aaaa_records']:
                print(f"     AAAA Records: {', '.join(domain_data['aaaa_records'])}")
            if domain_data['mx_records']:
                print(f"     MX Records: {', '.join(domain_data['mx_records'])}")
            if domain_data['ns_records']:
                print(f"     NS Records: {', '.join(domain_data['ns_records'])}")
            if domain_data['cname_records']:
                print(f"     CNAME Records: {', '.join(domain_data['cname_records'])}")
        
        # Bütün IP-lər
        print(f"\n🔍 BÜTÜN TAPILAN IP-LƏR:")
        for i, ip in enumerate(sorted(self.results.get('all_unique_ips', [])), 1):
            whois = self.results.get('whois_info', {}).get(ip, {})
            org = whois.get('org', whois.get('orgname', ''))
            country = whois.get('country', '')
            
            info = f" ({org}" + (f", {country}" if country else "") + ")" if org or country else ""
            print(f"     {i:2d}. {ip}{info}")
        
        # IP aralıqları
        if self.results.get('ip_ranges'):
            print(f"\n📍 IP ARALIQLARI:")
            for range_key, ips in self.results.get('ip_ranges', {}).items():
                if len(ips) > 1:
                    print(f"     • {range_key}: {ips}")

    def save_results_to_file(self):
        """Nəticələri fayla yazar"""
        filename = f"{self.domain}_ip_discovery.json"
        
        # Set-ləri list-ə çevir JSON üçün
        output_data = {}
        for key, value in self.results.items():
            if isinstance(value, set):
                output_data[key] = list(value)
            else:
                output_data[key] = value
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False)
            print(f"\n💾 Nəticələr fayla yazıldı: {filename}")
        except Exception as e:
            print(f"\n❌ Fayl yazma xətası: {e}")

    def run_full_discovery(self):
        """Tam kəşfiyyat prosesini başladır"""
        self.print_banner()
        
        try:
            self.load_subdomains()
            self.generate_common_subdomains()
            self.discover_all_ips()
            self.historical_dns_lookup()
            
            # WHOIS məlumatları
            if self.results.get('all_unique_ips'):
                self.get_whois_info(self.results['all_unique_ips'])
            
            self.analyze_ip_ranges()
            self.generate_comprehensive_report()
            self.save_results_to_file()
            
        except KeyboardInterrupt:
            print("\n\n⚠️ İstifadəçi tərəfindən dayandırıldı.")
        except Exception as e:
            print(f"\n❌ Ümumi xəta: {e}")

def main():
    print("Advanced IP Discovery Tool")
    print("=" * 50)
    
    # Domain input
    domain = input("Ana domain daxil edin (məsələn: example.com): ").strip()
    if not domain:
        print("❌ Domain daxil edilmədi!")
        return
    
    # Subdomain fayl input
    subdomain_file = input("Subdomain faylı (boş buraxmaq olar): ").strip()
    if subdomain_file and not os.path.exists(subdomain_file):
        print(f"⚠️ Fayl tapılmadı: {subdomain_file}")
        subdomain_file = None
    
    # Tool-u işə sal
    discovery = AdvancedIPDiscovery(domain, subdomain_file)
    discovery.run_full_discovery()

if __name__ == "__main__":
    main()
